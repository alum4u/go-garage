// Code generated by MockGen. DO NOT EDIT.
// Source: ./publisher.go

// Package rabbitmqpub_test is a generated GoMock package.
package rabbitmqpub_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
)

// MockChanneler is a mock of Channeler interface.
type MockChanneler struct {
	ctrl     *gomock.Controller
	recorder *MockChannelerMockRecorder
}

// MockChannelerMockRecorder is the mock recorder for MockChanneler.
type MockChannelerMockRecorder struct {
	mock *MockChanneler
}

// NewMockChanneler creates a new mock instance.
func NewMockChanneler(ctrl *gomock.Controller) *MockChanneler {
	mock := &MockChanneler{ctrl: ctrl}
	mock.recorder = &MockChannelerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChanneler) EXPECT() *MockChannelerMockRecorder {
	return m.recorder
}

// ExchangeDeclare mocks base method.
func (m *MockChanneler) ExchangeDeclare(name, kind string, durable, autoDelete, internal, noWait bool, args amqp.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclare", name, kind, durable, autoDelete, internal, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare.
func (mr *MockChannelerMockRecorder) ExchangeDeclare(name, kind, durable, autoDelete, internal, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockChanneler)(nil).ExchangeDeclare), name, kind, durable, autoDelete, internal, noWait, args)
}

// Publish mocks base method.
func (m *MockChanneler) Publish(exchange, key string, mandatory, immediate bool, msg amqp.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", exchange, key, mandatory, immediate, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockChannelerMockRecorder) Publish(exchange, key, mandatory, immediate, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockChanneler)(nil).Publish), exchange, key, mandatory, immediate, msg)
}
